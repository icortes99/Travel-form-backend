# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TravelAgency {
  id: Float
  uuid: String
  ownerId: Int
  name: String
  website: String
  logo: String
  owner: User
  applications: [Application!]
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Person {
  id: Int
  uuid: String
  applicationId: Int
  firstName: String
  lastName: String
  birthdate: DateTime
  application: Application
  createdAt: DateTime
  updatedAt: DateTime
}

type Attraction {
  id: Float
  uuid: String
  destinationId: Int
  name: String
  description: String
  images: [String!]
  travelDuration: Float
  travelDistance: Float
  destination: Destination
  createdAt: DateTime
  updatedAt: DateTime
}

type Destination {
  id: Float
  uuid: String
  name: String
  description: String
  images: [String!]
  video: String
  attractions: [Attraction!]
  applications: [Application!]
  createdAt: DateTime
  updatedAt: DateTime
}

type Application {
  id: Int
  uuid: String
  userId: Int
  travelAgencyId: Int
  destinationId: Int
  user: User
  travelAgency: TravelAgency
  destination: Destination
  companions: [Person!]
  createdAt: DateTime
  updatedAt: DateTime
}

type User {
  id: Float
  uuid: String
  personId: Int
  email: String
  photo: String
  phoneNumber: String
  person: Person
  applications: [Application!]
  travelAgencies: [TravelAgency!]
  createdAt: DateTime
  updatedAt: DateTime
}

type Hotel {
  id: Int
  uuid: String
  name: String
  description: String
  images: [String!]
  price: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type Query {
  user(where: UserWhereUniqueInput!): User
  travelAgency(where: TravelAgencyWhereUniqueInput!): TravelAgency
  hotel(where: AttractionWhereUniqueInput!): Hotel
  destination(where: DestinationWhereUniqueInput!): Destination
  attraction(where: AttractionWhereUniqueInput!): Attraction
  application(where: ApplicationWhereUniqueInput!): Application
}

input UserWhereUniqueInput {
  uuid: String
  email: String
}

input TravelAgencyWhereUniqueInput {
  uuid: String
  id: Int
}

input AttractionWhereUniqueInput {
  uuid: String
  id: Int
}

input DestinationWhereUniqueInput {
  uuid: String
  id: Int
}

input ApplicationWhereUniqueInput {
  uuid: String
  id: Int
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTravelAgency(data: TravelAgencyCreateInput!): TravelAgency!
  createHotel(data: HotelCreateInput!): Hotel!
  createDestination(data: DestinationCreateInput!): Destination!
  createAttraction(data: AttractionCreateInput!): Attraction!
  createApplication(data: ApplicationCreateInput!): Application!
}

input UserCreateInput {
  email: String!
  password: String!
  photo: String!
  phoneNumber: String!
  person: PersonCreateNestedOneWithoutUserInput!
}

input PersonCreateNestedOneWithoutUserInput {
  create: PersonCreateWithoutUserInput!
}

input PersonCreateWithoutUserInput {
  firstName: String!
  lastName: String!
  birthdate: DateTime!
}

input TravelAgencyCreateInput {
  name: String!
  website: String!
  logo: String!
  owner: UserCreateNestedOneWithoutTravelAgencyInput!
}

input UserCreateNestedOneWithoutTravelAgencyInput {
  connect: UserWhereUniqueInput!
}

input HotelCreateInput {
  name: String!
  description: String!
  images: [String!]!
  price: Float!
}

input DestinationCreateInput {
  name: String!
  description: String!
  images: [String!]!
  video: String!
}

input AttractionCreateInput {
  name: String!
  description: String!
  images: [String!]!
  travelDuration: Float!
  travelDistance: Float!
  destination: DestinationCreateNestedOneWithoutAttractionsInput!
}

input DestinationCreateNestedOneWithoutAttractionsInput {
  connect: DestinationWhereUniqueInput!
}

input ApplicationCreateInput {
  user: UserCreateNestedOneWithoutTravelAgencyInput
  travelAgency: TravelAgencyCreateNestedOneWithoutApplicationsInput!
  companions: PersonCreateNestedManyWithoutApplicationInput
  destination: DestinationCreateNestedOneWithoutApplicationsInput!
}

input TravelAgencyCreateNestedOneWithoutApplicationsInput {
  connect: TravelAgencyWhereUniqueInput!
}

input PersonCreateNestedManyWithoutApplicationInput {
  createMany: PersonCreateManyApplicationInputEnvelope!
}

input PersonCreateManyApplicationInputEnvelope {
  data: [PersonCreateWithoutUserInput!]!
}

input DestinationCreateNestedOneWithoutApplicationsInput {
  connect: DestinationWhereUniqueInput!
}