# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TravelAgency {
  id: Float
  uuid: String
  slug: String
  ownerId: Int
  name: String
  website: String
  logo: String
  owner: User
  applications: [Application!]
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ApplicationAttraction {
  id: Float
  uuid: String
  applicationId: Float
  attractionId: Float
  startDate: DateTime
  endDate: DateTime
  application: Application
  attraction: Attraction
}

type Attraction {
  id: Float
  uuid: String
  destinationId: Int
  name: String
  description: String
  images: [String!]
  destination: Destination
  applicationAttractions: [ApplicationAttraction!]
  createdAt: DateTime
  updatedAt: DateTime
}

type Destination {
  id: Float
  uuid: String
  name: String
  description: String
  images: [String!]
  video: String
  attractions: [Attraction!]
  applications: [Application!]
  createdAt: DateTime
  updatedAt: DateTime
}

type HotelAttraction {
  hotelId: Int
  attractionId: Int
  hotel: Hotel
  attraction: Attraction
}

type Hotel {
  id: Int
  uuid: String
  name: String
  description: String
  images: [String!]
  roomTypes: [String!]
  createdAt: DateTime
  updatedAt: DateTime
  hotelAttractions: [HotelAttraction!]
}

type Person {
  id: Int
  uuid: String
  firstName: String
  lastName: String
  age: Int
  createdAt: DateTime
  updatedAt: DateTime
  passengers: [Passengers!]
}

type Passengers {
  hotelId: Float!
  personId: Float!
  applicationId: Float!
  roomAssigned: Float!
  hotel: Hotel!
  person: Person!
  application: Application!
}

type Application {
  id: Int
  uuid: String
  userId: Int
  travelAgencyId: Int
  destinationId: Int
  leadSource: LeadSource
  userCurrentLocation: String
  hasEntryPermission: Boolean
  startDate: DateTime
  endDate: DateTime
  tripObjective: TripObjective
  contactPreference: ContactPreference
  user: User
  travelAgency: TravelAgency
  destination: Destination
  passengers: [Passengers!]
  applicationAttractions: [ApplicationAttraction!]
  createdAt: DateTime
  updatedAt: DateTime
}

enum LeadSource {
  INSTAGRAM
  FACEBOOK
  REFERRAL
  WEBSITE
  OTHER
}

enum TripObjective {
  VACATION
  FAMILY
  COUPLE
  SOLO
  FRIENDS
  ADVENTURE
  RELAXATION
  CULTURAL_EXPLORATION
  FOOD_AND_CULINARY
  BEACH_AND_SUN
  WILDLIFE_AND_NATURE
  SPORTS_AND_RECREATION
  HONEYMOON
  OTHER
}

enum ContactPreference {
  CALL
  VIDEO_CALL
  EMAIL
  SMS
  WHATSAPP
  OTHER
}

type User {
  id: Float
  uuid: String
  personId: Int
  email: String
  photo: String
  phoneNumber: String
  person: Person
  applications: [Application!]
  travelAgencies: [TravelAgency!]
  createdAt: DateTime
  updatedAt: DateTime
}

type Query {
  user(where: UserWhereUniqueInput!): User
  travelAgency(where: TravelAgencyWhereUniqueInput!): TravelAgency
  hotel(where: HotelWhereUniqueInput!): Hotel
  destination(where: DestinationWhereUniqueInput!): Destination
  attraction(where: AttractionWhereUniqueInput!): Attraction
  application(where: ApplicationWhereUniqueInput!): Application
  hotelDestination(where: HotelAttractionWhereUniqueInput!): HotelAttraction
  hotelsInDestinationAgency(where: HotelAttractionWhereUniqueInput!): [HotelAttraction!]
}

input UserWhereUniqueInput {
  uuid: String
  email: String
}

input TravelAgencyWhereUniqueInput {
  uuid: String
  id: Int
  slug: String
}

input HotelWhereUniqueInput {
  uuid: String
  id: Int
}

input DestinationWhereUniqueInput {
  uuid: String
  id: Int
}

input AttractionWhereUniqueInput {
  uuid: String
  id: Int
}

input ApplicationWhereUniqueInput {
  uuid: String
  id: Int
}

input HotelAttractionWhereUniqueInput {
  hotelId_attractionId: HotelAttractionHotelIdAttractionIdCompoundUniqueInput
}

input HotelAttractionHotelIdAttractionIdCompoundUniqueInput {
  hotelId: Float
  attractionId: Float
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTravelAgency(data: TravelAgencyCreateInput!): TravelAgency!
  createHotel(data: HotelCreateInput!): Hotel!
  createDestination(data: DestinationCreateInput!): Destination!
  createAttraction(data: AttractionCreateInput!): Attraction!
  createApplication(data: ApplicationCreateInput!): Application!
  createHotelDestination(data: HotelAttractionCreateInput!): HotelAttraction!
}

input UserCreateInput {
  email: String!
  password: String!
  photo: String!
  phoneNumber: String!
  person: PersonCreateNestedOneWithoutUserInput!
}

input PersonCreateNestedOneWithoutUserInput {
  create: PersonCreateWithoutUserInput!
}

input PersonCreateWithoutUserInput {
  firstName: String!
  lastName: String!
  age: Int!
}

input TravelAgencyCreateInput {
  slug: String!
  name: String!
  website: String!
  logo: String!
  owner: UserCreateNestedOneWithoutTravelAgencyInput!
}

input UserCreateNestedOneWithoutTravelAgencyInput {
  connect: UserWhereUniqueInput!
}

input HotelCreateInput {
  name: String!
  description: String!
  images: [String!]!
  roomTypes: [String!]!
}

input DestinationCreateInput {
  name: String!
  description: String!
  images: [String!]!
  video: String!
}

input AttractionCreateInput {
  name: String!
  description: String!
  images: [String!]!
  destination: DestinationCreateNestedOneWithoutAttractionsInput!
}

input DestinationCreateNestedOneWithoutAttractionsInput {
  connect: DestinationWhereUniqueInput!
}

input ApplicationCreateInput {
  user: UserCreateNestedOneWithoutApplicationsInput
  travelAgency: TravelAgencyCreateNestedOneWithoutApplicationsInput!
  destination: DestinationCreateNestedOneWithoutApplicationsInput!
  passengers: PassengersCreateNestedManyWithoutApplicationInput
  leadSource: LeadSource!
  userCurrentLocation: String!
  hasEntryPermission: Boolean!
  startDate: DateTime!
  endDate: DateTime!
  tripObjective: TripObjective!
  contactPreference: ContactPreference!
  applicationAttractions: ApplicationAttractionCreateNestedManyWithoutApplicationInput!
}

input UserCreateNestedOneWithoutApplicationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input TravelAgencyCreateNestedOneWithoutApplicationsInput {
  connect: TravelAgencyWhereUniqueInput!
}

input DestinationCreateNestedOneWithoutApplicationsInput {
  connect: DestinationWhereUniqueInput!
}

input PassengersCreateNestedManyWithoutApplicationInput {
  create: [PassengersCreateWithoutApplicationInput!]!
}

input PassengersCreateWithoutApplicationInput {
  person: PersonCreateNestedOneWithoutPassengersInput!
  hotel: HotelCreateNestedOneWithoutPassengersInput!
  roomAssigned: Float!
}

input PersonCreateNestedOneWithoutPassengersInput {
  create: PersonCreateWithoutPassengersInput!
}

input PersonCreateWithoutPassengersInput {
  firstName: String!
  lastName: String!
  age: Int!
}

input HotelCreateNestedOneWithoutPassengersInput {
  connect: HotelWhereUniqueInput!
}

input ApplicationAttractionCreateNestedManyWithoutApplicationInput {
  create: [ApplicationAttractionCreateWithoutApplicationInput!]!
}

input ApplicationAttractionCreateWithoutApplicationInput {
  startDate: DateTime!
  endDate: DateTime!
  attraction: AttractionCreateNestedOneWithoutApplicationAttractionsInput!
}

input AttractionCreateNestedOneWithoutApplicationAttractionsInput {
  connect: AttractionWhereUniqueInput!
}

input HotelAttractionCreateInput {
  hotel: HotelAttractionCreateNestedManyWithoutHotelInput!
  attraction: HotelAttractionCreateNestedManyWithoutAttractionInput!
}

input HotelAttractionCreateNestedManyWithoutHotelInput {
  connect: HotelWhereUniqueInput!
}

input HotelAttractionCreateNestedManyWithoutAttractionInput {
  connect: AttractionWhereUniqueInput!
}