generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id            Int          @id @default(autoincrement())
  uuid          String       @unique @default(uuid())
  applicationId Int?         @map("application_id")
  firstName     String       @map("first_name")
  lastName      String       @map("last_name")
  birthdate     DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User?
  application   Application? @relation(fields: [applicationId], references: [id])

  @@map("person")
}

model User {
  id             Int            @id @default(autoincrement())
  uuid           String         @unique @default(uuid())
  personId       Int            @unique @map("person_id")
  email          String         @unique
  password       String
  photo          String
  phoneNumber    String         @map("phone_number")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  applications   Application[]
  travelAgencies TravelAgency[]
  person         Person         @relation(fields: [personId], references: [id])

  @@map("user")
}

model TravelAgency {
  id           Int           @id @default(autoincrement())
  uuid         String        @unique @default(uuid())
  ownerId      Int           @map("owner_id")
  name         String
  website      String
  logo         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  owner        User          @relation(fields: [ownerId], references: [id])

  @@map("travel_agency")
}

model Application {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid())
  userId         Int?         @map("user_id")
  travelAgencyId Int          @map("travel_agency_id")
  destinationId  Int          @map("destination_id")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User?        @relation(fields: [userId], references: [id])
  travelAgency   TravelAgency @relation(fields: [travelAgencyId], references: [id])
  destination    Destination  @relation(fields: [destinationId], references: [id])
  companions     Person[]

  @@map("application")
}

model Destination {
  id           Int           @id @default(autoincrement())
  uuid         String        @unique @default(uuid())
  name         String
  description  String
  images       String[]
  video        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  attractions  Attraction[]
  applications Application[]

  @@map("destination")
}

model Attraction {
  id             Int         @id @default(autoincrement())
  uuid           String      @unique @default(uuid())
  destinationId  Int         @map("destination_id")
  name           String
  description    String
  images         String[]
  travelDuration Float       @map("travel_duration")
  travelDistance Float       @map("travel_distance")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  destination    Destination @relation(fields: [destinationId], references: [id])

  @@map("attraction")
}

model Hotel {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  name        String
  description String
  images      String[]
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hotel")
}
